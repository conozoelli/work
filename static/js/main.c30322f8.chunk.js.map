{"version":3,"sources":["components/ViewTasks/tasks.module.css","components/common/FormsControls/FormsControls.module.css","components/Content/style.module.css","api/api.js","redux/auth-reducer.js","redux/tasks-reducer.js","redux/redux-store.js","utils/validators/validators.js","components/common/FormsControls/FormsControls.js","components/Login/AddLoginForm/AddLoginForm.jsx","components/Login/LoginPage.jsx","components/common/Paginator/Paginator.jsx","components/ViewTasks/Task.jsx","components/ViewTasks/Tasks.jsx","redux/tasks-selectors.js","components/ViewTasks/ShowTasksContainer.jsx","components/Content/AddTask/AddTask.jsx","components/Content/EditTask/EditTask.jsx","components/common/Paginator/SortTasks.jsx","components/Content/TasksPage.jsx","components/Content/TasksContainer.jsx","App.js","serviceWorker.js","index.js","components/common/Paginator/Paginator.module.css","components/Login/Login.module.css"],"names":["module","exports","authAPI","data","form","FormData","append","username","password","axios","headers","tasksAPI","currentPage","sortDirection","sort_field","email","text","status","localStorage","getItem","id","stateInit","isAuth","userId","message","isLogined","authReducer","state","action","type","value","setIsAuth","setMessage","setCheckLogined","visibleTaskEditForm","visibleTaskAddForm","tasks","pageSize","totalUsersCount","tasksForEdit","responseServer","sortedValue","portionSize","setVisibleEditTask","tasksEditVisible","setTasks","editTasks","setResponseServer","response","setSortDirection","getTasksThunk","dispatch","a","setItem","JSON","stringify","currentPagesSortedByValue","parse","currentPagesSortDirectionValue","currentPagesSortedValues","CP","responce","mainStateTasksWithAdmitEdited","newData","map","t","adminEditTask","editedTasksStore","tasksStore","countTasks","total_task_count","tasksReducer","tasksAddVisible","dataForEdit","reducers","combineReducers","auth","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ReduxThunk","requairedField","FormContorll","input","meta","touched","error","children","hasError","className","styles","formControll","Textarea","props","restProps","Input","createField","placeholder","name","validateArray","component","Field","validate","reduxForm","handleSubmit","onSubmit","style","formSummaryError","connect","loginMeThunk","token","stopSubmit","_error","to","color","login","loginForm","formData","Paginator","portionNumber","this","setState","nextProps","nextState","totalCount","parseInt","pageCount","Math","ceil","pages","i","push","portionCount","leftPortionPageNumber","rightPortionPageNumber","s","paginator","buttonPrev","onClick","filter","p","pageNumber","key","e","onPageChanged","buttonNext","React","Component","Task","taskBlock","tableShowTasks","nameColumn","contentColumn","task","edited","disabled","editButton","onEditTask","Tasks","isLoginedCheck","getTaskSuperSelector","createSelector","getPageSize","getTotalTasksCount","getCurrentPage","ShowTasksContainer","editTaskDataActionCreater","app","closeTask","addTaskForm","Form","closeAddTaskForm","editTask","editTaskForm","closeEditTaskForm","SortTasks","sorted","sortDirectionASC","sortDirectionDESC","valueSelect","setNewSortedValueASC","currentTarget","setNewSortedValueDESC","changeOptionValues","addDataToSort","sortByValue","length","onSubmitSortDirection","sortBlock","onChange","checked","idx","sortButton","TaskPage","taskMain","addUser","addTask","errorEditForm","isLoginedAdmin","EditTaskForm","initialValues","onSubmitForEdit","loginBlock","logoutButton","logoutMeThunk","TasksContainer","val","setVisibleFormTaskAdd","EditTaskThunk","onSubmitForAdd","addTaskThunk","TasksPage","removeItem","newObjTask","dataTasksForEdited","App","path","render","AppContainer","withRouter","MainApp","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c30322f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskBlock\":\"tasks_taskBlock__z9QNp\",\"tableShowTasks\":\"tasks_tableShowTasks__1gqty\",\"nameColumn\":\"tasks_nameColumn__2V8LX\",\"edited\":\"tasks_edited__30XBF\",\"contentColumn\":\"tasks_contentColumn__26DN1\",\"editButton\":\"tasks_editButton__CsvqD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControll\":\"FormsControls_formControll__31Uht\",\"error\":\"FormsControls_error__2H-3I\",\"addTaskForm\":\"FormsControls_addTaskForm__8OxBL\",\"editTaskForm\":\"FormsControls_editTaskForm__2YRph\",\"formControl\":\"FormsControls_formControl__1CSJU\",\"span\":\"FormsControls_span__3NuaX\",\"formSummaryError\":\"FormsControls_formSummaryError__1KCuE\",\"closeAddTaskForm\":\"FormsControls_closeAddTaskForm__BA2WG\",\"closeEditTaskForm\":\"FormsControls_closeEditTaskForm__1S9uE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskMain\":\"style_taskMain__3hmYF\",\"loginBlock\":\"style_loginBlock__2ygqV\",\"addUser\":\"style_addUser__qBspT\",\"logoutButton\":\"style_logoutButton__23jtS\",\"addTaskForm\":\"style_addTaskForm__3jIBh\",\"EditTaskForm\":\"style_EditTaskForm__WIFnh\",\"errorEditForm\":\"style_errorEditForm__3C3xA\",\"isLoginedAdmin\":\"style_isLoginedAdmin__1ZxNC\",\"sortDirection\":\"style_sortDirection__2B1BX\"};","import * as axios from \"axios/index\";\r\n\r\nexport const authAPI = {\r\n    loginUser(data) {\r\n        let form = new FormData();\r\n        form.append(\"username\", data.username);\r\n        form.append(\"password\", data.password);\r\n        return axios.post(`https://uxcandy.com/~shapoval/test-task-backend/v2/login?developer=admin`, form, {headers: {'Content-Type': 'multipart/form-data'}})\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(currentPage, sortDirection, sort_field) {\r\n        return axios.get(`https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=admin&page=${currentPage}&sort_direction=${sortDirection}&sort_field=${sort_field}`);\r\n    },\r\n    addTask(data) {\r\n        let form = new FormData();\r\n        form.append(\"username\", data.username);\r\n        form.append(\"email\", data.email);\r\n        form.append(\"text\", data.text);\r\n        form.append(\"status\", data.status);\r\n        return axios.post(`https://uxcandy.com/~shapoval/test-task-backend/v2/create?developer=admin`, form, {headers: {'Content-Type': 'multipart/form-data'}});\r\n    },\r\n    editTask(data) {\r\n        let status = data.status ? 10 : 0;\r\n        let form = new FormData();\r\n        form.append(\"status\", status);\r\n        form.append(\"text\", data.text);\r\n        form.append(\"token\", localStorage.getItem('token'));\r\n        return axios.post(`https://uxcandy.com/~shapoval/test-task-backend/v2/edit/${data.id}?developer=admin`, form, {headers: {'Content-Type': \"application/json\"}});\r\n    }\r\n}\r\n\r\n\r\n\r\n","import REACT from 'react';\r\nimport { authAPI, securityAPI } from \"../api/api\";\r\nimport { stopSubmit } from 'redux-form';\r\nconst SET_IS_AUTH = \"SET_IS_AUTH\";\r\nconst SET_MESSAGE = \"SET_MESSAGE\";\r\nconst SET_ISLOGINED = \"SET_ISLOGINED\";\r\n\r\nlet stateInit = {\r\n    isAuth: localStorage.getItem('token'),\r\n    userId: [],\r\n    message: '',\r\n    isLogined:''\r\n}\r\n\r\nconst authReducer = (state = stateInit, action) => {\r\n    switch (action.type) {\r\n        case SET_IS_AUTH:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            }\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.message,\r\n            }\r\n        case SET_ISLOGINED:\r\n            return {\r\n                ...state,\r\n                isLogined: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default authReducer;\r\n\r\n\r\nexport const setIsAuth = (isAuth) => ({ type: SET_IS_AUTH, isAuth })\r\nexport const setMessage = (message) => ({ type: SET_MESSAGE, message })\r\nexport const setCheckLogined = (value) => ({ type: SET_ISLOGINED,value })\r\n\r\n\r\nexport const loginMeThunk = (data) => async (dispatch) => {\r\n    let response = await authAPI.loginUser(data);\r\n    if (response.data.status === \"ok\") {\r\n        localStorage.setItem('token', response.data.message.token);\r\n        dispatch(setIsAuth(localStorage.getItem('token')))\r\n        dispatch(setCheckLogined(''))\r\n        dispatch(setMessage('Привет,admin'));\r\n\r\n    } else {\r\n        dispatch(stopSubmit('login', { _error: response.data.message.password }));\r\n    }\r\n}\r\n\r\nexport const logoutMeThunk = () => async (dispatch) => {\r\n    localStorage.removeItem('token');\r\n    dispatch(setIsAuth(false));\r\n    dispatch(setMessage(null));\r\n}\r\n\r\n\r\n","import REACT from 'react';\r\nimport {tasksAPI} from \"../api/api\";\r\nconst SET_VISIBLE = \"SET_VISIBLE\";\r\nconst SET_TASKS = \"SET_TASKS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst GET_COUNT_TASKS = \"GET_COUNT_TASKS\"\r\nconst SAVE_TASKS_FOR_EDIT = \"SAVE_TASKS_FOR_EDIT\"\r\nconst SET_VISIBLE_EDIT_FORM = \"SET_VISIBLE_EDIT_FORM\"\r\nconst SET_SERVER_RESPONSE = \"SET_SERVER_RESPONSE\"\r\nconst SET_SORT_DIRECTION = \"SET_SORT_DIRECTION\"\r\nconst EDIT_TASKS = \"EDIT_TASKS\"\r\nconst ADMIN_EDITED_TASK = \"ADMIN_EDITED_TASK\"\r\nconst SET_TASKS_NEW = \"SET_TASKS_NEW\"\r\n\r\n\r\nlet stateInit = {\r\n    visibleTaskEditForm: false,\r\n    visibleTaskAddForm: false,\r\n    tasks: [],\r\n    pageSize: 3,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    tasksForEdit: '',\r\n    responseServer: '',\r\n    sortDirection: '',\r\n    sortedValue: '',\r\n    portionSize: 5\r\n}\r\n\r\nconst tasksReducer = (state = stateInit, action) => {\r\n    switch (action.type) {\r\n        case SET_VISIBLE:\r\n            return {\r\n                ...state,\r\n                visibleTaskAddForm: action.tasksAddVisible\r\n            }\r\n        case SET_VISIBLE_EDIT_FORM:\r\n            return {\r\n                ...state,\r\n                visibleTaskEditForm: action.tasksEditVisible\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        case EDIT_TASKS:\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(t => {\r\n                    if (t.id === action.data.id) {\r\n                        return {\r\n                            ...t,\r\n                            text: action.data.text,\r\n                            status: action.data.status,\r\n                            adminEditTask: action.data.adminEditTask\r\n                        }\r\n                    }\r\n                    return t;\r\n                })\r\n            }\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.CP\r\n            }\r\n        case GET_COUNT_TASKS:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.countTasks\r\n            }\r\n        case SAVE_TASKS_FOR_EDIT:\r\n            return {\r\n                ...state,\r\n                tasksForEdit: action.dataForEdit,\r\n            }\r\n        case SET_SERVER_RESPONSE:\r\n            return {\r\n                ...state,\r\n                responseServer: action.response,\r\n            }\r\n        case SET_SORT_DIRECTION:\r\n            return {\r\n                ...state,\r\n                sortedValue: action.sortedValue\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setVisibleFormTaskAdd = (tasksAddVisible) => ({type: SET_VISIBLE, tasksAddVisible})\r\nexport const setVisibleEditTask = (tasksEditVisible) => ({type: SET_VISIBLE_EDIT_FORM, tasksEditVisible})\r\nexport const editTaskDataActionCreater = (dataForEdit) => ({type: SAVE_TASKS_FOR_EDIT, dataForEdit})\r\nexport const setTasks = (tasks) => ({type: SET_TASKS, tasks})\r\nexport const editTasks = (data) => ({type: EDIT_TASKS, data})\r\nexport const setCurrentPage = (CP) => ({type: SET_CURRENT_PAGE, CP})\r\nexport const getCountTasks = (countTasks) => ({type: GET_COUNT_TASKS, countTasks})\r\nexport const setResponseServer = (response) => ({type: SET_SERVER_RESPONSE, response})\r\nexport const setSortDirection = ( sortedValue) => ({type: SET_SORT_DIRECTION, sortedValue})\r\n\r\n\r\nexport const getTasksThunk = (currentPage, sortDirection, sortedValue) => {\r\n    return async (dispatch) => {\r\n        localStorage.setItem('currentPagesSortedByValue' + currentPage, JSON.stringify(sortedValue));\r\n        let currentPagesSortedByValue = JSON.parse(localStorage.getItem('currentPagesSortedByValue' + currentPage));\r\n        localStorage.setItem('currentPagesSortDirectionValue' + currentPage, JSON.stringify(sortDirection));\r\n        let currentPagesSortDirectionValue = JSON.parse(localStorage.getItem('currentPagesSortDirectionValue' + currentPage));\r\n        localStorage.setItem('pages' + currentPage, JSON.stringify({currentPage, currentPagesSortDirectionValue, currentPagesSortedByValue}));\r\n        let currentPagesSortedValues = JSON.parse(localStorage.getItem('pages' + currentPage));\r\n        localStorage.setItem('currentPage', JSON.stringify(currentPagesSortedValues.currentPage));\r\n        dispatch(setCurrentPage(currentPage));\r\n        dispatch(setSortDirection( sortedValue));\r\n        let responce = await tasksAPI.getTasks(currentPage, sortDirection, sortedValue);\r\n        let mainStateTasksWithAdmitEdited = JSON.parse(localStorage.getItem('dataTasksForEdited' + currentPage));\r\n        if (localStorage.getItem('dataTasksForEdited' + currentPage)) {\r\n            let newData = responce.data.message.tasks.map(t => {\r\n                if (t.id === mainStateTasksWithAdmitEdited.id) {\r\n                    return {\r\n                        ...t,\r\n                        id: mainStateTasksWithAdmitEdited.id,\r\n                        username: mainStateTasksWithAdmitEdited.username,\r\n                        email: mainStateTasksWithAdmitEdited.email,\r\n                        text: mainStateTasksWithAdmitEdited.text,\r\n                        status: mainStateTasksWithAdmitEdited.status,\r\n                        adminEditTask: true\r\n                    }\r\n                }\r\n                return t;\r\n            })\r\n            localStorage.setItem('editedTasks' + currentPage, JSON.stringify(newData));\r\n            let editedTasksStore = JSON.parse(localStorage.getItem('editedTasks' + currentPage));\r\n            dispatch(setTasks(editedTasksStore));\r\n        } else {\r\n            localStorage.setItem('tasks' + currentPage, JSON.stringify(responce.data.message.tasks));\r\n            let tasksStore = JSON.parse(localStorage.getItem('tasks' + currentPage));\r\n            dispatch(setTasks(tasksStore));\r\n        }\r\n        dispatch(getCountTasks(responce.data.message.total_task_count));\r\n    }\r\n}\r\n\r\nexport const addTaskThunk = (data) => {\r\n    return async (dispatch) => {\r\n        let responce = await tasksAPI.addTask(data);\r\n        if(responce.data.status ==='error'){\r\n            dispatch(setResponseServer(responce.data.message.email));\r\n        }else{\r\n            dispatch(setResponseServer('Задание добавлено'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const EditTaskThunk = (data, currentPage) => {\r\n    return async (dispatch) => {\r\n        let responce = await tasksAPI.editTask(data);\r\n        if (responce.data.status === \"ok\") {\r\n            let newObjTask = {\r\n                id: data.id,\r\n                username: data.username,\r\n                email: data.email,\r\n                text: data.text,\r\n                status: data.status,\r\n                adminEditTask: true\r\n            };\r\n            localStorage.setItem('dataTasksForEdited' + currentPage, JSON.stringify(newObjTask));\r\n            let dataTasksForEdited = JSON.parse(localStorage.getItem('dataTasksForEdited' + currentPage));\r\n            dispatch(editTasks(dataTasksForEdited))\r\n        } else {\r\n            dispatch(setResponseServer(responce.data.message.id))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default tasksReducer;","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport tasksReducer from \"./tasks-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    tasks: tasksReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(ReduxThunk)));\r\n\r\nexport default store;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const requairedField = value => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n    return \"Заполните все поля\";\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLenght) => value => {\r\n    if (value && value.length > maxLenght) {\r\n        return `max lenght is  ${maxLenght} symbols`;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n","import React from \"react\";\r\nimport styles from './FormsControls.module.css';\r\nimport { requairedField } from \"../../../utils/validators/validators\";\r\nimport { Field } from \"redux-form\";\r\n\r\nconst FormContorll = ({ input, meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControll + \" \" + (hasError ? styles.error : '')}>\r\n            <div>  {children}</div>\r\n            {hasError ? <span>{error}</span> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = props => {\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormContorll {...props}> <textarea {...input} {...restProps} /></FormContorll>\r\n}\r\n\r\nexport const Input = props => {\r\n    const { input, meta, ...restProps } = props;\r\n    return <FormContorll {...props}><input {...input} {...restProps} /></FormContorll>\r\n}\r\n\r\nexport const createField = (placeholder, name, validateArray, component, props = {}, text = \"\") => <div><Field\r\n    placeholder={placeholder}\r\n    name={name}\r\n    validate={validateArray}\r\n    component={component} {...props} /> {text}\r\n</div>\r\n","import React from 'react'\r\nimport { createField, Input } from '../../common/FormsControls/FormsControls';\r\nimport { requairedField } from '../../../utils/validators/validators';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport style from '../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => {\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            {error && <span className={style.formSummaryError}>\r\n                {error}\r\n            </span>}\r\n            {createField(\"username\", \"username\", [requairedField], Input)}\r\n            {createField(\"Password\", \"password\", [requairedField], Input, { type: \"password\" })}\r\n            <div>\r\n                <button>Войти</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'login' })(LoginForm)\r\n\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {loginMeThunk} from \"../../redux/auth-reducer\";\r\nimport style from './Login.module.css';\r\nimport LoginForm from '../Login/AddLoginForm/AddLoginForm';\r\nimport {Redirect} from 'react-router';\r\n\r\nconst LoginPage = props => {\r\n    const login = (formData) => {\r\n        props.loginMeThunk(formData);\r\n    }\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n    return (\r\n        <div className={`${style.color} ${style.login}`}>\r\n            <div className={style.loginForm}>\r\n                <h2>ВХОД</h2>\r\n                <LoginForm onSubmit={login}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n\r\n    }\r\n}\r\n\r\nexport default compose(connect(mapStateToProps, {loginMeThunk}))(LoginPage)\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Paginator.module.css';\r\n\r\nclass Paginator extends React.Component {\r\n    state={\r\n        portionNumber:1\r\n    }\r\n    componentDidMount() {\r\n        this.data = JSON.parse(localStorage.getItem('pagePart'));\r\n        if(localStorage.getItem('pagePart')){\r\n            this.setState({\r\n                portionNumber:this.data.portionNumber\r\n            });\r\n        }else{\r\n            this.setState({\r\n                portionNumber:1\r\n            });\r\n        }\r\n    }\r\n    componentWillUpdate(nextProps,nextState){\r\n        localStorage.setItem('pagePart', JSON.stringify(nextState));\r\n    }\r\n\r\n    render() {\r\n        let totalCount = parseInt(this.props.totalUsersCount);\r\n        let pageCount = Math.ceil(totalCount / this.props.pageSize)\r\n        let pages = [];\r\n        for (let i = 1; i <= pageCount; i++) {\r\n            pages.push(i);\r\n        }\r\n\r\n        let portionCount = Math.ceil(pageCount / this.props.portionSize);\r\n        let leftPortionPageNumber = (this.state.portionNumber - 1) * this.props.portionSize + 1;\r\n        let rightPortionPageNumber = this.state.portionNumber * this.props.portionSize;\r\n        return <div className={s.paginator}>\r\n            {this.state.portionNumber > 1 && <button className={s.buttonPrev} onClick={() => {\r\n                this.setState({portionNumber:this.state.portionNumber - 1})\r\n            }}>PREV</button>}\r\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map((p) => {\r\n                return <button\r\n                    className={this.props.currentPage === p && s.pageNumber} key={p} onClick={(e) => {\r\n                    this.props.onPageChanged(p)\r\n                }}>{p}\r\n                </button>\r\n            })}\r\n            {portionCount > this.state.portionNumber && <button className={s.buttonNext} onClick={() => {\r\n                this.setState({portionNumber:this.state.portionNumber + 1})\r\n            }}>NEXT</button>}\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\nexport default Paginator;\r\n","import React from 'react';\r\nimport s from './tasks.module.css';\r\n\r\nlet Task = props => {\r\n    return (\r\n        <div className={s.taskBlock} key={props.key}>\r\n            <table className={s.tableShowTasks}>\r\n                <tr>\r\n                    <td className={s.nameColumn}>Id:</td>\r\n                    <td className={s.contentColumn}>{props.task.id}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className={s.nameColumn}>UserName:</td>\r\n                    <td className={s.contentColumn}>{props.task.username}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className={s.nameColumn}> Email:</td>\r\n                    <td className={s.contentColumn}>{props.task.email}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className={s.nameColumn}>Text:</td>\r\n                    <td className={s.contentColumn}>{props.task.text}</td>\r\n                    <td className={s.edited}>{props.task.adminEditTask?'Отредактировано администратором':''}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td className={s.nameColumn}>Status:</td>\r\n                    <td className={s.contentColumn}>{props.task.status==0?'Не выполнено':'Выполнено'}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{props.isAuth &&\r\n                    <button disabled={props.visibleTaskAddForm?true:false}  className={s.editButton} onClick={() => props.onEditTask(props.task)}>Редактировать</button>\r\n                    }</td>\r\n                    <td></td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\nexport default Task;\r\n","import React from 'react';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport Task from \"./Task\";\r\nimport style from '../Login/Login.module.css'\r\n\r\nclass Tasks extends React.Component {\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className={style.isLoginedCheck}>{this.props.isLogined}</div>\r\n                <Paginator currentPage={this.props.currentPage} onPageChanged={this.props.onPageChanged}\r\n                           totalUsersCount={this.props.totalUsersCount}\r\n                           pageSize={this.props.pageSize}{...this.props} portionSize={this.props.portionSize}/>\r\n                <div>\r\n                    {this.props.tasks.map((t, i) => <Task visibleTaskAddForm={this.props.visibleTaskAddForm}  task={t} key={t.id} isAuth={this.props.isAuth}\r\n                                                      onEditTask={this.props.onEditTask}/>)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Tasks;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getTasks = (state) => {\r\n    return state.tasks.tasks;\r\n}\r\n\r\nexport const getTaskSuperSelector = createSelector(getTasks, (tasks) => {\r\n    return tasks;\r\n})\r\n\r\nexport const getPageSize = (state) => {\r\n    return state.tasks.pageSize;\r\n}\r\n\r\nexport const getTotalTasksCount = (state) => {\r\n    return state.tasks.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state) => {\r\n    return state.tasks.currentPage;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Tasks from \"./Tasks\";\r\nimport {\r\n    editTaskDataActionCreater,\r\n    getTasksThunk,\r\n    setVisibleEditTask,\r\n    setSortDirection, setTasks\r\n} from \"../../redux/tasks-reducer\";   //Action creators\r\nimport {\r\n    getCurrentPage, getPageSize, getTotalTasksCount,\r\n    getTasks, getTaskSuperSelector,\r\n} from \"../../redux/tasks-selectors\";\r\nimport {setCheckLogined} from '../../redux/auth-reducer';\r\n\r\n\r\nclass ShowTasksContainer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currentPage = JSON.parse(localStorage.getItem('currentPage'));\r\n        this.app = JSON.parse(localStorage.getItem('pages' + currentPage));\r\n        let currentPagesSortDirectionValue = JSON.parse(localStorage.getItem('currentPagesSortDirectionValue' + currentPage));\r\n        let currentPagesSortedByValue = JSON.parse(localStorage.getItem('currentPagesSortedByValue' + currentPage));\r\n        if (localStorage.getItem('pages' + currentPage)) {\r\n            this.props.getTasksThunk(this.app.currentPage, currentPagesSortDirectionValue, currentPagesSortedByValue);\r\n        } else {\r\n            let {currentPage} = this.props;\r\n            this.props.getTasksThunk(currentPage, this.props.sortDirection, this.props.sortedValue);\r\n        }\r\n    }\r\n\r\n    onEditTask = (data) => {\r\n        if (localStorage.getItem('token')) {\r\n            this.props.editTaskDataActionCreater(data);\r\n            this.props.setVisibleEditTask(true);\r\n        } else {\r\n            this.props.setCheckLogined('Залогинься');\r\n        }\r\n    }\r\n\r\n    onPageChanged = (pageNumber) => {\r\n        let currentPagesSortDirectionValue = JSON.parse(localStorage.getItem('currentPagesSortDirectionValue' + pageNumber));\r\n        let currentPagesSortedByValue = JSON.parse(localStorage.getItem('currentPagesSortedByValue' + pageNumber));\r\n\r\n            this.props.getTasksThunk(pageNumber, currentPagesSortDirectionValue, currentPagesSortedByValue);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Tasks visibleTaskAddForm={this.props.visibleTaskAddForm} setTasks={this.props.setTasks}  {...this.props} isLogined={this.props.isLogined}\r\n                   onPageChanged={this.onPageChanged} onEditTask={this.onEditTask}\r\n                   setSortDirection={this.props.setSortDirection} portionSize={this.props.portionSize}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tasks: getTaskSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalTasksCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        sortDirection: state.tasks.sortDirection,\r\n        sortedValue: state.tasks.sortedValue,\r\n        portionSize: state.tasks.portionSize,\r\n        isAuth: state.auth.isAuth,\r\n        isLogined: state.auth.isLogined,\r\n        visibleTaskAddForm: state.tasks.visibleTaskAddForm\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getTasksThunk, editTaskDataActionCreater, setCheckLogined, setVisibleEditTask, setTasks, setSortDirection\r\n})(ShowTasksContainer)\r\n","import React, {useState} from 'react';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {Form, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport {requairedField} from \"../../../utils/validators/validators\";\r\n\r\nconst AddTask = ({handleSubmit, error, closeTask}) => {\r\n    return (\r\n        <div className={style.addTaskForm}>\r\n            <Form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <button className={style.closeAddTaskForm} onClick={() => {\r\n                        closeTask(false)\r\n                    }}>X\r\n                    </button>\r\n                </div>\r\n                {error && <div className={style.formSummaryError}>{error}</div>}\r\n                <div>\r\n                    {createField(\"Username\", \"username\", [requairedField], Input)}\r\n                </div>\r\n                <div>\r\n                    {createField(\"Email\", \"email\", [requairedField], Input)}\r\n                </div>\r\n\r\n                <div>\r\n                    {createField(\"Text\", \"text\", [requairedField], Textarea)}\r\n                </div>\r\n\r\n                <div>\r\n                    <button  onClick={() => {\r\n                    }}>Добавить задание\r\n                    </button>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form: 'add-form'})(AddTask)","import React from 'react';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {Form, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\nimport {requairedField} from \"../../../utils/validators/validators\";\r\n\r\nconst EditTask = ({handleSubmit, error,editTask,isAuth}) => {\r\n    return (\r\n        <div className={style.editTaskForm}>\r\n        <Form onSubmit={handleSubmit}>\r\n            <button className={style.closeEditTaskForm} onClick={() => {\r\n                editTask()\r\n            }}>X\r\n            </button>\r\n            {error && <div className={style.formSummaryError}>{error}</div>}\r\n\r\n            <div>\r\n                <b>Text:</b>\r\n                {createField(\"Text\", \"text\", [requairedField], Textarea)}\r\n            </div>\r\n\r\n            <div className={style.status}>\r\n                <b>Status:</b>\r\n                {createField(\"\", \"status\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <button disabled={isAuth?false:true}  onClick={() => {\r\n                }}>{isAuth?'Редактировать':'Авторизируйся'}\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default reduxForm({form: 'edit-form'})(EditTask)","import React from 'react'\r\nimport style from './Paginator.module.css'\r\n\r\nclass SortTasks extends React.Component {\r\n    sorted = ['id', 'username', 'email', 'status'];\r\n    state = {\r\n        sortDirectionASC: '',\r\n        sortDirectionDESC: '',\r\n        valueSelect: 'id'\r\n    }\r\n\r\n    setNewSortedValueASC = (e) => {\r\n        this.setState({\r\n            sortDirectionASC: e.currentTarget.value\r\n        })\r\n    }\r\n    setNewSortedValueDESC = (e) => {\r\n        this.setState({\r\n            sortDirectionDESC: e.currentTarget.value\r\n        })\r\n    }\r\n    changeOptionValues = (e) => {\r\n        this.setState({valueSelect: e.currentTarget.value})\r\n    }\r\n    addDataToSort = () => {\r\n        let sortDirection;\r\n        if (this.state.sortDirectionASC.length > 0) {\r\n            sortDirection = this.state.sortDirectionASC;\r\n        } else if (this.state.sortDirectionDESC.length > 0) {\r\n            sortDirection = this.state.sortDirectionDESC;\r\n        } else {\r\n            sortDirection = ''\r\n        }\r\n        let sortByValue;\r\n        if (this.state.valueSelect.length > 0) {\r\n            sortByValue = this.state.valueSelect;\r\n        } else {\r\n            sortByValue = ''\r\n        }\r\n        this.props.onSubmitSortDirection(sortDirection, sortByValue);\r\n        this.setState({\r\n            sortDirectionASC: '',\r\n            sortDirectionDESC: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={style.sortBlock}>\r\n                <span>asc</span>\r\n                <input onChange={this.setNewSortedValueASC} checked={this.state.sortDirectionASC == '' ? false : true}\r\n                       name=\"changeSort\" type=\"radio\" value=\"asc\"/>\r\n                <span>desc</span>\r\n                <input onChange={this.setNewSortedValueDESC} checked={this.state.sortDirectionDESC == '' ? false : true}\r\n                       name=\"changeSort\" type=\"radio\" value=\"desc\"/>\r\n                <select onChange={this.changeOptionValues} name=\"select\">{this.sorted.map((s, idx) =>\r\n                    <option value={s} key={idx}>{s}</option>)}</select>\r\n                <button disabled={this.props.visibleTaskEditForm || this.props.visibleTaskAddForm ? true : false}\r\n                        className={style.sortButton} onClick={this.addDataToSort}>Сортировать\r\n                </button>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SortTasks;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport s from './style.module.css'\r\nimport { NavLink } from \"react-router-dom\";\r\nimport UsersContainer from \"../ViewTasks/ShowTasksContainer\";\r\nimport AddTask from \"./AddTask/AddTask\";\r\nimport EditTask from \"./EditTask/EditTask\";\r\nimport SortTasks from \"../common/Paginator/SortTasks\";\r\n\r\n\r\nconst TaskPage = props => {\r\n    return (\r\n        <div className={s.taskMain}>\r\n            <div><UsersContainer /></div>\r\n            <div className={s.addUser}>\r\n                <button disabled={props.visibleTaskEditForm?true:false} onClick={props.addTask}>Добавить задание</button>\r\n            </div>\r\n            <div className={s.errorEditForm}>{props.responseServer}</div>\r\n            <div className={s.isLoginedAdmin}>{props.message}</div>\r\n            <div className={s.sortDirection}> <SortTasks visibleTaskAddForm={props.visibleTaskAddForm} visibleTaskEditForm={props.visibleTaskEditForm} setSortDirection={props.setSortDirection} onSubmitSortDirection={props.onSubmitSortDirection} /></div>\r\n            <div className={s.addTaskForm}>\r\n                {props.visibleTaskAddForm &&\r\n                    <AddTask onSubmit={props.onSubmit} closeTask={props.addTask} />\r\n                }\r\n            </div>\r\n            <div className={s.EditTaskForm}>\r\n                {props.visibleTaskEditForm &&\r\n                    <EditTask initialValues={props.tasksForEdit} isAuth={props.isAuth} editTask={props.editTask} onSubmit={props.onSubmitForEdit} />\r\n                }\r\n            </div>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div>\r\n                    <button className={s.logoutButton} onClick={props.logoutMeThunk}>Выход</button>\r\n                </div> :\r\n                    <NavLink to={'/login'}><button className={s.logoutButton}>Вход</button></NavLink>}\r\n\r\n            </div>\r\n            <div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TaskPage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport TasksPage from \"./TasksPage\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {logoutMeThunk} from \"../../redux/auth-reducer\";\r\nimport {\r\n    addTaskThunk,\r\n    setVisibleEditTask,\r\n    setVisibleFormTaskAdd,\r\n    getTasksThunk,\r\n    EditTaskThunk,\r\n    setSortDirection\r\n} from \"../../redux/tasks-reducer\";\r\n\r\nclass TasksContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    addTask = (val) => {\r\n        this.props.setVisibleFormTaskAdd(val)\r\n    }\r\n\r\n    onSubmitForEdit = (data) => {\r\n        if (this.props.tasks.length > 0) {\r\n            this.props.tasks.map(t => {\r\n                if (t.id === this.props.tasksForEdit.id) {\r\n                    if (t.text !== data.text || t.status!==data.status) {\r\n                        this.props.EditTaskThunk(data,this.props.currentPage);\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        this.props.setVisibleEditTask(false)\r\n    }\r\n    editTask = () => {\r\n        this.props.setVisibleEditTask(false)\r\n    }\r\n    onSubmitForAdd = (data) => {\r\n        this.props.addTaskThunk(data)\r\n        this.props.setVisibleFormTaskAdd(false)\r\n        this.props.getTasksThunk(this.props.currentPage, this.props.sortDirection, this.props.sortedValue);\r\n    }\r\n    onSubmitSortDirection = (sortDirection, sortedValue) => {\r\n        this.props.getTasksThunk(this.props.currentPage, sortDirection, sortedValue);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <TasksPage setSortDirection={this.props.setSortDirection} editTask={this.editTask} {...this.props} addTask={this.addTask}\r\n                           onSubmit={this.onSubmitForAdd}\r\n                           onSubmitForEdit={this.onSubmitForEdit} onSubmitSortDirection={this.onSubmitSortDirection}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks.tasks,\r\n        sortDirection: state.tasks.sortDirection,\r\n        sortedValue: state.tasks.sortedValue,\r\n        currentPage: state.tasks.currentPage,\r\n        isAuth: state.auth.isAuth,\r\n        visibleTaskAddForm: state.tasks.visibleTaskAddForm,\r\n        visibleTaskEditForm: state.tasks.visibleTaskEditForm,\r\n        tasksForEdit: state.tasks.tasksForEdit,\r\n        responseServer: state.tasks.responseServer,\r\n        message: state.auth.message\r\n\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setVisibleFormTaskAdd,\r\n        logoutMeThunk, addTaskThunk, getTasksThunk, setVisibleEditTask, EditTaskThunk, setSortDirection\r\n    }),\r\n)(TasksContainer);\r\n\r\n\r\n","import React from 'react';\r\nimport {HashRouter, Route, withRouter} from \"react-router-dom\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport './App.css';\r\nimport store from \"./redux/redux-store\";\r\nimport LoginPage from \"./components/Login/LoginPage\";\r\nimport TasksContainer from \"./components/Content/TasksContainer\";\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='content'>\r\n                <div className='app-wrapper'>\r\n                    <Route path='/' render={() => <TasksContainer />}/>\r\n                    <Route path='/login' render={() => <LoginPage />}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet AppContainer = compose(\r\n    connect(null, null),\r\n    withRouter\r\n)(App);\r\n\r\nconst MainApp = props => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <AppContainer />\r\n            </Provider>\r\n        </HashRouter>\r\n\r\n    )\r\n}\r\n\r\nexport default MainApp;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1f42C\",\"pageNumber\":\"Paginator_pageNumber__3bhj6\",\"buttonNext\":\"Paginator_buttonNext__wCJJX\",\"buttonPrev\":\"Paginator_buttonPrev__3alTa\",\"sortBlock\":\"Paginator_sortBlock__2TYgP\",\"sortButton\":\"Paginator_sortButton__2a_VP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__3Pl_u\",\"loginForm\":\"Login_loginForm__2UAS9\",\"isLoginedCheck\":\"Login_isLoginedCheck__3fMyG\"};"],"sourceRoot":""}